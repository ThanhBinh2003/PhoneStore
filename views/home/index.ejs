<style>
  .header-container {
    position: fixed;
    top: 0;
  }
  .home {
    min-height: 100vh;
    margin-bottom: 2rem;
    padding: 1rem 1rem;
    margin-top: 6rem;
  }
  .home h3 {
    background-color: #f2f1eb;
    position: sticky;
    top: 0;
    z-index: 1;
    padding: 0.5rem 0.5rem;
  }
  .home .product-container {
    position: fixed;
    left: 0;
    background-color: #f2f1eb;
    border-radius: 1rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    height: 100vh;
    overflow-y: scroll;
    padding-bottom: 8rem;
  }
  .home .card {
    margin-bottom: 1rem;
    width: 100%;
  }

  .home .card-img-top {
    min-width: 100%;
    aspect-ratio: 4/3;
    object-fit: cover;
  }
  .home .cart-container {
    position: fixed;
    right: 0;
    background-color: #f2f1eb;
    border-radius: 1rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    height: 100vh;
    padding-bottom: 8rem;
  }
  .home .cart {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .home .cart-body {
    flex: 1;
    overflow-y: scroll;
  }
  .home .cart-footer {
    background-color: #f2f1eb;
    position: sticky;
    bottom: 0;
    z-index: 1;
    padding: 0.5rem 0.5rem;
  }

  .home .btn-quantity {
    background-color: #f2f1eb;
    border: none;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    margin: 0 0.25rem;
    border: 1px solid #ced4da;
  }

  .home .btn-remove {
    background-color: #f2f1eb;
    border: none;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    margin: 0 0.25rem;
    border: 1px solid #ced4da;
    color: red;
  }
</style>
<div class="home container-fluid">
  <div class="row">
    <!-- PRODUCT -->
    <div class="product-container col-9">
      <h3>PRODUCT</h3>
      <div class="row" id="productList"></div>
    </div>
    <!-- CART -->
    <div class="cart-container col-3">
      <div class="cart">
        <h3>CART</h3>
        <div class="cart-body"></div>
        <div class="cart-footer">
          <p class="text-danger" id="totalPrice"></p>
          <button class="btn btn-primary w-100" onclick="showCustomer()">
            Checkout
          </button>
        </div>
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="checkoutModal"
    tabindex="-1"
    aria-labelledby="checkoutModal"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header d-flex justify-content-between">
          <h1 class="modal-title fs-5" id="checkoutModal">
            Customer information
          </h1>
          <button
            type="button"
            class="btn btn-secondary ms-2 d-none"
            id="btn-detail"
          >
            Detail
          </button>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <form>
            <div class="mb-3">
              <label for="phone" class="form-label">Phone number</label>
              <input
                type="text"
                class="form-control"
                id="phone"
                placeholder="Enter phone number"
              />
            </div>
            <div class="mb-3 d-none" id="name-input">
              <label for="name" class="form-label">Fullname</label>
              <input
                type="text"
                class="form-control"
                id="name"
                placeholder="Enter fullname"
              />
            </div>
            <div class="mb-3 d-none" id="address-input">
              <label for="address" class="form-label">Address</label>
              <input
                type="text"
                class="form-control"
                id="address"
                placeholder="Enter address"
              />
            </div>
            <hr />
            <div class="mb-3" id="totalReceived-input">
              <label for="totalReceived" class="form-label"
                >Total received</label
              >
              <input
                type="number"
                class="form-control"
                id="totalReceived"
                value="0"
              />
            </div>
            <div class="mb-3" id="totalChange-input">
              <label for="totalChange" class="form-label">Total change</label>
              <input
                type="number"
                class="form-control"
                id="totalChange"
                disabled
              />
            </div>
          </form>
        </div>
        <div class="modal-footer d-flex justify-content-between">
          <p class="text-danger w-70" id="totalPriceCheckout"></p>
          <div>
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="button" class="btn btn-primary" id="check-button">
              Check
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  // CUSTOMER
  const showCustomer = () => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      if (cartData.length > 0) {
        $("#checkoutModal").modal("show")
      } else {
        alert("Cart is empty!")
      }
    } else {
      alert("Cart is empty!")
    }
  }

  // CHECKOUT FUNCTION
  let customer = null
  // Check if user exists
  async function checkUser() {
    // Get phone number from input
    const phone = document.getElementById("phone").value
    const url = `${window.location.origin}/user/checkCustomer/${phone}`
    const res = await fetch(url)
    const data = await res.json()
    $("#phone").attr("disabled", "disabled")
    if (res.status === 200) {
      customer = data.data
      // Show fullname and address input
      $("#checkoutModal .modal-header h1").text(
        "Welcome back, " + customer.name + "!"
      )
      $("#name").val(customer.name)
      $("#name-input").removeClass("d-none")
      $("#name").attr("disabled", "disabled")
      $("#address").val(customer.address)
      $("#address-input").removeClass("d-none")
      $("#address").attr("disabled", "disabled")
      $("#check-button").text("Checkout")
      $("#btn-detail").removeClass("d-none")
      $("#btn-detail").click(() => {
        window.open(
          `${window.location.origin}/order/customer-orders/${customer.username}`
        )
      })
    } else if (res.status === 201) {
      // If user does not exist
      // Show fullname and address input
      customer = "empty"
      $("#checkoutModal .modal-header h1").text(
        "Welcome new customer, please enter your information!"
      )
      document.getElementById("name-input").classList.remove("d-none")
      document.getElementById("address-input").classList.remove("d-none")
      document.getElementById("check-button").textContent = "Checkout"
    } else {
      // If error
      alert(data.message)
    }
  }

  const prepareCheckout = async () => {
    if (customer == "empty") {
      const phone = document.getElementById("phone").value
      const name = document.getElementById("name").value
      const address = document.getElementById("address").value
      const url = `${window.location.origin}/user/createCustomer`
      const res = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          phone,
          name,
          address,
        }),
      })
      const data = await res.json()
      if (res.status === 200) {
        customer = data.data
        checkOut(customer)
      } else {
        // If error
        alert(data.message)
      }
    } else {
      checkOut(customer)
    }
  }

  const checkOut = async (customer) => {
    // Get cart from localStorage
    const cart = localStorage.getItem("cart")
    // If cart exists
    if (cart) {
      // Parse cart data
      const cartData = JSON.parse(cart)
      // If cart is not empty
      if (cartData.length > 0) {
        // Create order
        const url = `${window.location.origin}/order`
        const res = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            customerId: customer.username,
            items: cartData,
            totalReceived: $("#totalReceived").val(),
            totalChange: $("#totalChange").val(),
          }),
        })
        const data = await res.json()
        if (res.status === 200) {
          onCheckoutSuccess(data.data._id)
        } else {
          // If error
          alert(data.message)
        }
      } else {
        // If cart is empty
        alert("Cart is empty!")
      }
    } else {
      // If cart does not exist
      alert("Cart is empty!")
    }
  }

  const onCheckoutSuccess = async (_id) => {
    localStorage.removeItem("cart")
    renderCart()
    loadProducts()
    resetCheckout()
    $("#checkoutModal").modal("hide")
    window.open(`${window.location.origin}/order/pdf/${_id}`)
  }

  const productList = document.querySelector("#productList")
  const productContainer = document.querySelector(".product-container")
  let totalPrice = 0
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY
    productList.style.top = scrollY
  })
  let productData = []
  const loadProducts = async (search) => {
    try {
      let url = `${window.location.origin}/product`
      if (search) {
        url += `?search=${search}`
      }
      const res = await fetch(url)
      const data = await res.json()
      const products = data.data
      productData = products.filter((item) => item.quantity > 0)
      productList.html = ""
      let html = ""
      productData.forEach((item) => {
        html += `
          <div class="col-2">
            <div class="card">
              <img src="${item?.image}" class="card-img-top" />
              <div class="card-body">
                <h5 class="card-title">${item?.name}</h5>
                <p class="card-text">${item?.sellingPrice.toLocaleString(
                  "vi"
                )} đ</p>
                <p class="card-text">Inventory: ${item?.quantity}</p>
                <button class="btn btn-primary" onclick="addToCart('${
                  item._id
                }')">Add to cart</a>
              </div>
            </div>
          </div>
        `
      })
      productList.innerHTML = html
    } catch (error) {
      console.log(error)
    }
  }

  const addToCart = (itemId) => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      const item = cartData.find((item) => item._id === itemId)
      const product = productData.find((item) => item._id === itemId)
      if (item) {
        if (item.quantity >= product.quantity) {
          alert("Inventory is not enough!")
          return
        }
        item.quantity += 1
      } else {
        cartData.push({ ...product, quantity: 1 })
      }
      localStorage.setItem("cart", JSON.stringify(cartData))
    } else {
      const product = productData.find((item) => item._id === itemId)
      localStorage.setItem(
        "cart",
        JSON.stringify([{ ...product, quantity: 1 }])
      )
    }
    renderCart()
  }

  const renderCart = () => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      let html = ""
      totalPrice = 0
      cartData.forEach((item) => {
        totalPrice += item.sellingPrice * item.quantity
        html += `
          <div class="d-flex justify-content-between mb-3">
            <div class="d-flex">
              <div style="
                align-items: center;
                justify-content: center;
                display: flex;
              ">
                <img src="${
                  item.image
                }" style="width: 70px; height: 70px; object-fit: cover;"/>
              </div>
              <div class="ms-1">
                <div>${item.name}</div>
                <div>${item.sellingPrice.toLocaleString("vi")} đ</div>
                <p class="text-danger p-0 m-0">Total: ${(
                  item.sellingPrice * item.quantity
                ).toLocaleString("vi")} đ</p>
              </div>
            </div>
            <div class="d-flex">
              <div class="text-center d-flex align-items-center">
                <div>
                  <button class="btn-quantity" onclick="decreaseItem('${
                    item._id
                  }')">-</button>

                    ${item.quantity}

                  <button class="btn-quantity" onclick="increaseItem('${
                    item._id
                  }')">+</button>
                </div>
              </div>
              <div style="
                    justify-content: center;
                    align-items: center;
                    display: flex;
              ">
                <button class="btn-remove" onclick="removeFromCart('${
                  item._id
                }')"><i class="fa-solid fa-trash"></i></button>
              </div>
            </div>
          </div>
        `
      })
      document.querySelector(".cart-body").innerHTML = html
      document.querySelector(
        "#totalPrice"
      ).innerHTML = `Total: ${totalPrice.toLocaleString("vi")} đ`
      document.querySelector(
        "#totalPriceCheckout"
      ).innerHTML = `Total: ${totalPrice.toLocaleString("vi")} đ`
    } else {
      document.querySelector(".cart-body").innerHTML = ""
      document.querySelector("#totalPrice").innerHTML = `Total: 0 đ`
      document.querySelector("#totalPriceCheckout").innerHTML = `Total: 0 đ`
    }
  }

  const decreaseItem = (itemId) => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      const item = cartData.find((item) => item._id === itemId)
      if (item) {
        item.quantity -= 1
        if (item.quantity === 0) {
          removeFromCart(itemId)
        } else {
          localStorage.setItem("cart", JSON.stringify(cartData))
          renderCart()
        }
      }
    }
  }

  const increaseItem = (itemId) => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      const item = cartData.find((item) => item._id === itemId)
      const product = productData.find((item) => item._id === itemId)
      if (item) {
        if (item.quantity >= product.quantity) {
          alert("Inventory is not enough!")
          return
        }
        item.quantity += 1
        localStorage.setItem("cart", JSON.stringify(cartData))
        renderCart()
      }
    }
  }

  const removeFromCart = (itemId) => {
    const cart = localStorage.getItem("cart")
    if (cart) {
      const cartData = JSON.parse(cart)
      const newCartData = cartData.filter((item) => item._id !== itemId)
      localStorage.setItem("cart", JSON.stringify(newCartData))
      renderCart()
    }
  }

  const resetCheckout = () => {
    $("#checkoutModal .modal-header h1").text("Customer information")
    $("#phone").val("")
    $("#name-input").addClass("d-none")
    $("#name").val("")
    $("#name").removeAttr("disabled")
    $("#address-input").addClass("d-none")
    $("#address").val("")
    $("#address").removeAttr("disabled")
    $("#check-button").text("Check")
    $("#totalReceived").val(0)
    $("#totalChange").val(0)
    $("#phone").removeAttr("disabled")
    customer = null
  }
  $(document).ready(() => {
    loadProducts()
    renderCart()
    const localStorageSetHandler = function (e) {
      if (e.key === "search") {
        loadProducts(e.value)
      }
    }
    document.addEventListener("itemInserted", localStorageSetHandler, false)

    // Add event listener to "Check" button
    document.getElementById("check-button").addEventListener("click", () => {
      let totalReceived = $("#totalReceived").val()
      if (totalReceived < totalPrice) {
        alert("Total received must be greater than total price!")
        return
      } else {
        $("#totalChange").val(totalReceived - totalPrice)
      }

      if (!customer) {
        checkUser()
      } else {
        prepareCheckout()
      }
    })

    $("#checkoutModal").on("hidden.bs.modal", function () {
      resetCheckout()
    })
  })
</script>
